---
name: Build

on:
  - push

jobs:
  # build_container:
  #   name: Build container
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checking out code from GitHub
  #       uses: actions/checkout@v2

  #     - name: Get Time
  #       id: time
  #       uses: nanzm/get-time-action@v1.1
  #       with:
  #         format: "YYYY.MM.DD"

  #     - name: Authenticate at ghcr.io
  #       run: echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u USERNAME --password-stdin

  #     - name: Build container
  #       run: docker build -t "ghcr.io/zhulik/arch_builder" .

  #     - name: Push container
  #       env:
  #         VERSION: "${{ steps.time.outputs.time }}"
  #       run: |
  #         docker tag "ghcr.io/zhulik/arch_builder" "ghcr.io/zhulik/arch_builder:$VERSION"
  #         docker push "ghcr.io/zhulik/arch_builder:latest"
  #         docker push "ghcr.io/zhulik/arch_builder:$VERSION"

  build_package:
    name: Build package
    runs-on: ubuntu-latest
    # needs:
    #   - build_container
    strategy:
      matrix:
        package: ["platformio"]
    steps:
      - uses: actions/checkout@v2

      - name: Authenticate at ghcr.io
        run: echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u USERNAME --password-stdin

      - name: Get latest version
        id: version_step
        run: echo "::set-output name=version::$(docker-compose run arch_builder pikaur -Si ${{ matrix.package }} | grep Version | cut -d' ' -f11)"

      - name: Print latest version
        run: echo ${{ steps.version_step.outputs.version }}

      - name: Cache package and dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: cache
          key: ${{ matrix.package }}-v2.5-${{ steps.version_step.outputs.version }}
          # restore-keys: |
          #   ${{ matrix.package }}-

      - name: Save existing package list
        id: packages_before_build_step
        run: echo "::set-output name=list::$(ls -t cache/pikaur)"

      - name: Print package list before build
        run: echo ${{ steps.packages_before_build_step.outputs.list }}

      - name: Build
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          chmod -R 777 cache
          docker-compose run arch_builder build.rb ${{ matrix.package }}
          sudo chmod -R 777 cache

      - name: Find new files
        if: steps.cache.outputs.cache-hit != 'true'
        id: new_files_step
        run: |
          files_before="${{ steps.packages_before_build_step.outputs.list }}"
          files_after="$(ls -t cache/pikaur)"
          echo "Files before:"
          echo $files_before
          echo "Files after:"
          echo $files_after

          created=""
          for i in $files_after
          do
            if ! echo "$files_before" | grep $i ; then
              created="$i $created"
            fi
          done

          echo "::set-output name=list::$created"
      - name: Print new files
        run: echo ${{ steps.new_files_step.outputs.list }}
