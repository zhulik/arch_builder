---
name: Build

on:
  push:
  schedule:
    - cron: "0 */3 * * *" # Every 3 hours

jobs:
  build_container:
    name: Build container
    runs-on: ubuntu-latest
    steps:
      - name: Check out
        uses: actions/checkout@v3

      - name: Get Time
        id: time
        uses: nanzm/get-time-action@v1.1
        with:
          format: "YYYY.MM.DD"

      - name: Authenticate at ghcr.io
        run: echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u USERNAME --password-stdin

      - name: Build
        run: docker build -t "ghcr.io/zhulik/arch_builder" .

      - name: Push
        env:
          VERSION: "${{ steps.time.outputs.time }}"
        run: |
          docker tag "ghcr.io/zhulik/arch_builder" "ghcr.io/zhulik/arch_builder:$VERSION"
          docker push "ghcr.io/zhulik/arch_builder:latest"
          docker push "ghcr.io/zhulik/arch_builder:$VERSION"

  build_package:
    name: Build package
    runs-on: ubuntu-latest
    needs:
      - build_container
    strategy:
      matrix:
        package:
          # - adguardhome # deal with colon in file names
          - flacon
          - google-chrome
          - package-query
          - pikaur
          - platformio
          - rubymine
          - telegraf
          - visual-studio-code-bin

    steps:
      - name: Check out
        uses: actions/checkout@v3

      - name: Authenticate at ghcr.io
        run: echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u USERNAME --password-stdin

      - name: Get latest version
        id: version_step
        run: |
          version=$(curl https://aur.archlinux.org/rpc/\?v\=5\&type\=info\&arg\[\]\=${{ matrix.package }} | jq -r .results\[\].Version)
          echo "::set-output name=version::$version"

      - name: Print latest version
        run: echo ${{ steps.version_step.outputs.version }}

      - name: Cache
        id: cache
        uses: actions/cache@v3
        with:
          path: cache
          key: ${{ matrix.package }}-v2.11-${{ steps.version_step.outputs.version }}
          restore-keys: |
            ${{ matrix.package }}-

      - name: Save existing package list
        id: packages_before_build_step
        run: echo "::set-output name=list::$(ls -t cache/pikaur)"

      - name: Print package list before build
        run: echo ${{ steps.packages_before_build_step.outputs.list }}

      - name: Build
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          chmod -R 777 cache
          docker-compose run arch_builder build.rb ${{ matrix.package }}
          sudo chmod -R 777 cache

      - name: Find new files
        if: steps.cache.outputs.cache-hit != 'true'
        id: new_files_step
        run: |
          files_before="${{ steps.packages_before_build_step.outputs.list }}"
          files_after="$(ls -t cache/pikaur)"
          echo "Files before:"
          echo $files_before
          echo "Files after:"
          echo $files_after

          created=""
          for i in $files_after
          do
            if ! echo "$files_before" | grep $i ; then
              created="cache/pikaur/$i,$created"
            fi
          done

          echo "::set-output name=list::$(echo $created)" # Trim and split $created

      - name: Print new files
        if: steps.cache.outputs.cache-hit != 'true'
        run: echo ${{ steps.new_files_step.outputs.list }}

      - name: Copy new files
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          mkdir artifacts
          mv {${{ steps.new_files_step.outputs.list }}} artifacts/

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          name: ${{ matrix.package }}
          path: artifacts/*

  push_to_mirror:
    name: Push to mirror
    runs-on: ubuntu-latest
    needs:
      - build_package
    steps:
      - name: Prepare directories
        run: |
          mkdir artifacts
          mkdir mirror

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Move artifacts
        run: mv artifacts/**/*.* mirror

      - name: List packages
        run: ls mirror/
